# See the full yml reference at https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml/
service: app

# Uncomment org and app if you want to integrate your deployment with the Serverless dashboard. See https://www.serverless.com/framework/docs/dashboard/ for more details.
org: dac09
app: redwood-nft-test

plugins:
  # - serverless-dotenv-plugin
  - serverless-finch
  - serverless-plugin-scripts

custom:
  scripts:
  # trying a hacky workaround, to see if we can get the API_URL after deploy
  # how can we get the endpoint here?
  # hooks:
  # "before:deploy:deploy": 'echo "Building web with API_URL: $API_URL" && yarn rw build web && sls client deploy'
  client:
    bucketName: redwood-sls-finch-deploy
    distributionFolder: web/dist
    indexDocument: index.html
    errorDocument: index.html

# See https://www.serverless.com/blog/cors-api-gateway-survival-guide/
# doesnt seem to work though
# resources:
#   Resources:
#     GatewayResponseDefault4XX:
#       Type: "AWS::ApiGateway::GatewayResponse"

#       Properties:
#         ResponseParameters:
#           gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
#           gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
#         ResponseType: DEFAULT_4XX
#         RestApiId:
#           Ref: "ApiGatewayRestApi"

provider:
  name: aws
  lambdaHashingVersion: "20201221"
  runtime: nodejs14.x
  region: us-east-2 # This is the AWS region where the service will be deployed.
  httpApi: # HTTP API is used by default. To learn about the available options in API Gateway, see https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html
    cors:
      allowedOrigins:
        - "*"
      allowedHeaders:
        - Content-Type
        - Authorization
        - Auth-Provider
    payload: "1.0"
  stackTags: # Add CloudFormation stack tags here
    source: serverless
    name: Redwood Lambda API with HTTP API Gateway
  tags: # Add service wide tags here
    name: Redwood Lambda API with HTTP API Gateway

package:
  individually: true

functions:
  auth:
    description: auth function deployed on AWS Lambda
    package:
      artifact: api/dist/zipball/auth.zip # This is the default location of the zip file generated during the deploy command.
    memorySize: 1024 # mb
    timeout: 25 # seconds (max: 29)
    tags: # Tags for this specific lambda function
      endpoint: /auth
    environment:
      DATABASE_URL: ${param:DATABASE_URL}
      SESSION_SECRET: ${param:SESSION_SECRET}
    handler: auth.handler
    events:
      - httpApi:
          path: /auth
          method: POST
      - httpApi:
          path: /auth
          method: GET
  graphql:
    description: graphql function deployed on AWS Lambda
    package:
      artifact: api/dist/zipball/graphql.zip # This is the default location of the zip file generated during the deploy command.
    memorySize: 1024 # mb
    timeout: 25 # seconds (max: 29)
    tags: # Tags for this specific lambda function
      endpoint: /graphql
    environment:
      DATABASE_URL: ${param:DATABASE_URL}
    handler: graphql.handler
    events:
      - httpApi:
          path: /graphql
          method: POST
